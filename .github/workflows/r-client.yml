on:
 push:
    branches:
      - main
###
###
### THIS WORKFLOW IS CURRENTLY UNAVAILABLE FOR USAGE !!! ###
###
###
###
 
name: Check R-Client

jobs: 
  Check-R-Client:
    runs-on:  ${{ matrix.config.os }}
    
    name: ${{ matrix.config.os }} (${{ matrix.config.r }})
    
    strategy:
      fail-fast: false
      matrix:
        config:
          # devel is more unstable but offers more features
          - { os: ubuntu-latest, r: "devel" }
          - { os: ubuntu-latest, r: "release" }
          
    env:
      # otherwise remotes::fun() errors cause the build to fail. Example: Unavailability of binaries
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      
    steps:
     
        
      - name: Checkout Code     
        uses: actions/checkout@v2
        
      - name: Docker Run
        run: |
          ls && pwd
          cd /home/runner/work/TestRepo/TestRepo/
          docker-compose -f docker-compose.yml up -d 
          docker-compose -f docker-compose.yml logs
                    
          
      - name: Check endpoints
        run:  |
         docker ps -a
         docker ps -a
         docker images
       # curl -vv http://localhost:80/api/v1 
            
      - name: Install R
        uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
       
      - name: Install devtools
        run: |
          sudo apt-get install libcurl4-openssl-dev
          sudo apt-get install curl
          R -e 'install.packages("remotes")'
          R -e 'library(remotes)'
       
      - name: Install R-Client module
        run:  R -e 'remotes::install_github(repo="Open-EO/openeo-r-client",dependencies=TRUE,force=TRUE)'
        
      - name: Execute R Script
        run:  R -e 'library(openeo); host_url="http://localhost:80/"; api_versions(host_url); gee = openeo::connect(host = host_url, version="1.0.0");collections=list_collections(); processes=list_processes(); print(names(processes)); install.packages("rlang"); library(rlang); install.packages("testthat"); library(testthat); test_that("check description of save_result", {expect_equal(processes$save_result$returns$description, "Returns a boolean which indicates if the save was successfull")}); test_that("check ndvi category", {expect_equal(print(processes$ndvi$categories[[2]][1]), "vegetation indices")});test_that("check keywords Sentinel2 collection", {expect_length(collections$`Sentinel2-Geosoft2`$keywords, 5)});test_that("check temporal extent SST", {expect_equal(collections$`SST-Geosoft2`$extent$temporal[[1]][[1]],"1981-09-01T00:00:00Z" )});test_that("check temporal extent SST", {expect_equal(collections$`SST-Geosoft2`$extent$temporal[[1]][[2]],"2020-12-31T23:59:59Z" )});test_that("check for correct number of collections", {expect_length(collections, 2)});test_that("check spatial and temporal extent Sentinel", {expect_equal(collections$`Sentinel2-Geosoft2`$extent$spatial, c(7.531529, 51.363158 , 9.143291, 52.350386))});test_that("check spatial and temporal extent Sentinel", {expect_equal(collections$`Sentinel2-Geosoft2`$extent$temporal[[1]][[1]], "2017-01-01T00:00:00Z")});test_that("check spatial and temporal extent Sentinel", {expect_equal(collections$`Sentinel2-Geosoft2`$extent$temporal[[1]][[2]], "2020-12-31T23:59:59Z")});test_that("check for collections that does not exist", {expect_null(collections$unknown)});test_that("check for Sentinel invalid spatial extent", {expect_failure(expect_equal(collections$`Sentinel2-Geosoft2`$extent$spatial, c(1,4000, 3, 17)))});test_that("check for Sentinel invalid temporal extent", {expect_failure(expect_equal(collections$`Sentinel2-Geosoft2`$extent$temporal[[1]][[1]], "1950-01-01T00:00:00Z" ))});test_that("check for Sentinel invalid temporal extent", {expect_failure(expect_equal(collections$`Sentinel2-Geosoft2`$extent$temporal[[1]][[2]], "2022-01-01T00:00:00Z" ))});test_that("check for collections to be named", {expect_named(collections)});test_that("check for processes to be named", {expect_named(processes)});test_that("check correct dimensions of SST cube", {expect_equal(collections$`SST-Geosoft2`$cube, "dimensions:{x:1424,y:720,z:1,t:'40years',bands:1}")});test_that("check for version not to be double", {expect_failure(expect_equal(collections$`SST-Geosoft2`$version, 1.0))});test_that("check that number of processes is higher than 3", {expect_gt(length(processes), 3)});test_that("check that number of processes is lower than 5", {expect_lt(length(processes), 5)});test_that("check if description for SST is provided", {expect_output(print(collections$`SST-Geosoft2`$description))});test_that("check if description for Sentinel is provided", {expect_output(print(collections$`Sentinel2-Geosoft2`$description))});test_that("check if description for ndvi is provided", {expect_output(print(processes$ndvi$description))});test_that("check if description for ndvi is provided", {expect_output(print(processes$mean_sst$description))});test_that("check if description for ndvi is provided", {expect_output(print(processes$save_result$description))});test_that("check if description for ndvi is provided", {expect_output(print(processes$load_collection$description))});test_that("check for the stac version to be of type character", {expect_type(collections$`SST-Geosoft2`$stac_version, "character")});test_that("check for invalid process description", {expect_null(describe_process("unknown"))});test_that("check for output of describe_process function", {expect_output(print(describe_process("ndvi")))})'
        
     

 
     
